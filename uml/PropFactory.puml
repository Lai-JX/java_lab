@startuml
'https://plantuml.com/class-diagram
abstract class AbstractGame
{
    + action():void
    + crashCheckAction(int mobScore, int eliteScore, int bossScore):void
}
class EasyModelGame
{
    + action():void
}
class CommonModelGame
{
    + action():void
}
class DifficultModelGame
{
    + action():void
}



abstract class AbstractProp
{
    + AbstractProp(int locationX, int locationY, int speedX, int speedY)
    + propWork():void
    + propWork(HeroAircraft heroAircraft):void
}
interface PropFactory
{
    + createProp(int locationX, int locationY, int speedX, int speedY):AbstractProp
}
class BloodPropFactory
{
    + createProp(int locationX, int locationY, int speedX, int speedY):AbstractProp
}
class BombPropFactory
{
    + createProp(int locationX, int locationY, int speedX, int speedY):AbstractProp
}
class BulletPropFactory
{
    + createProp(int locationX, int locationY, int speedX, int speedY):AbstractProp
}



class BloodProp {
    + BloodProp(int locationX, int locationY, int speedX, int speedY)
    + propWork():void
    + propWork(HeroAircraft heroAircraft):void
}

class BombProp {
    + BombProp(int locationX, int locationY, int speedX, int speedY)
    + propWork():void
    + propWork(HeroAircraft heroAircraft):void
}

class BulletProp {
    + BulletProp(int locationX, int locationY, int speedX, int speedY)
    + propWork():void
    + propWork(HeroAircraft heroAircraft):void
}

AbstractGame<|--EasyModelGame
AbstractGame<|--CommonModelGame
AbstractGame<|-- DifficultModelGame
EasyModelGame..>PropFactory
EasyModelGame..>AbstractProp
CommonModelGame..>PropFactory
CommonModelGame..>AbstractProp
DifficultModelGame..>PropFactory
DifficultModelGame..>AbstractProp



AbstractProp<|--BulletProp
AbstractProp<|--BombProp
AbstractProp<|--BloodProp

PropFactory<|..BloodPropFactory
PropFactory<|..BombPropFactory
PropFactory<|..BulletPropFactory

BloodPropFactory..>BloodProp
BulletPropFactory..>BulletProp
BombPropFactory..>BombProp











@enduml