@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # int locationX
    # int locationY
    # double speedX
    # double speedY
    # BufferedImage image
    # int width
    # int height
    # boolean isValid

    + AbstractFlyingObject(int locationX, int locationY, int speedX, double speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	# int maxHp
    # int hp
    + AbstractAircraft(int locationX, int locationY, int speedX, double speedY, double hp)
    + decreaseHp(int decrease):void
    + getHp():int
 }

abstract class BaseBullet
{
    - int power
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}


AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet
AbstractFlyingObject <|-- AbstractProp

AbstractAircraft <|-- HeroAircraft
AbstractAircraft <|-- AbstractEnemyAircraft
AbstractEnemyAircraft <|-- EliteEnemy
AbstractEnemyAircraft <|-- MobEnemy
AbstractEnemyAircraft <|-- BossEnemy

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

AbstractProp <|-- BloodProp
AbstractProp <|-- BombProp
AbstractProp <|-- BulletProp
EnemyBullet..>Subscriber
EliteEnemy..>Subscriber
MobEnemy..>Subscriber

class HeroAircraft {
    - StrategyInterface strategy
    - HeroAircraft heroAircraft
    + HeroAircraft(int locationX, int locationY, int speedX, double speedY, int hp,StrategyInterface strategy)
    + forward():void
    + getInstance(int blood):HeroAircraft
    + executeStrategy():List<BaseBullet>
    + setStrategy(StrategyInterface strategy):void
    + gainHp(int blood):void
}
class BossEnemy{
    - StrategyInterface strategy
    + BossEnemy(int locationX, int locationY, int speedX, double speedY, int hp,StrategyInterface strategy);
    + executeStrategy():List<BaseBullet>
    + setStrategy(StrategyInterface strategy):void
    + decreaseHp(double decrease):void
}
class EliteEnemy {
    - StrategyInterface strategy
    + EliteEnemy(int locationX, int locationY, int speedX, double speedY, int hp,StrategyInterface strategy)
    + executeStrategy():List<BaseBullet>
    + bombWork():void
    + setStrategy(StrategyInterface strategy):void
}

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, double speedY, int hp)
    + shoot():List<BaseBullet>
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, double speedY, int power)

}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, double speedY, int power)
     + bombWork():void
}
interface Subscriber{
    + bombWork():void
}


abstract class AbstractProp {
    + AbstractProp(int locationX, int locationY, int speedX, int speedY)
    + propWork(HeroAircraft heroAircraft):void
}

abstract AbstractEnemyAircraft{
    + AbstractEnemyAircraft(int locationX, int locationY, int speedX, double speedY, int hp)
}

class BloodProp {
    + BloodProp(int locationX, int locationY, int speedX, int speedY)
    + propWork(HeroAircraft heroAircraft):void
}

class BombProp {
    + ArrayList<Subscriber> enemyList
    + BombProp(int locationX, int locationY, int speedX, int speedY)
    + propWork(HeroAircraft heroAircraft):void
    + addSubscriber(Subscriber s):void
    + unSubscriber():void
}

class BulletProp {

    + BulletProp(int locationX, int locationY, int speedX, int speedY)
    + propWork(HeroAircraft heroAircraft):void

}


@enduml