@startuml
'https://plantuml.com/class-diagram


abstract class AbstractGame
{
    + action():void

}
class EasyModelGame
{
    + action():void
}
class CommonModelGame
{
    + action():void
}
class DifficultModelGame
{
    + action():void
}





abstract class EnemyAircraft
{
    + EnemyAircraft(int locationX, int locationY, int speedX, double speedY,int hp)
}
interface EnemyFactory
{
    EnemyAircraft createEnemy(int locationX, int locationY, int speedX, double speedY,int hp)
}
class BossEnemyFactory
{
    + createEnemy(int locationX, int locationY, int speedX, double speedY,int hp):EnemyAircraft
}
class EliteEnemyFactory
{
    + createEnemy(int locationX, int locationY, int speedX, double speedY,int hp):EnemyAircraft
}
class MobEnemyFactory
{
    + createEnemy(int locationX, int locationY, int speedX, double speedY,int hp):EnemyAircraft
}


class BossEnemy {
    + BossEnemy(int locationX, int locationY, int speedX, double speedY, int hp)
    + executeStrategy()List<BaseBullet>
}

class EliteEnemy {
    + EliteEnemy(int locationX, int locationY, int speedX, double speedY, int hp)
    + executeStrategy()List<BaseBullet>

    + bombWork():void
}

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, double speedY, int hp)
    + forward():void
    + bombWork():void
}

AbstractGame<|--EasyModelGame
AbstractGame<|--CommonModelGame
AbstractGame<|-- DifficultModelGame
EasyModelGame..>EnemyFactory
EasyModelGame..>EnemyAircraft
CommonModelGame..>EnemyFactory
CommonModelGame..>EnemyAircraft
DifficultModelGame..>EnemyFactory
DifficultModelGame..>EnemyAircraft

EnemyFactory<|..BossEnemyFactory
EnemyFactory<|..EliteEnemyFactory
EnemyFactory<|..MobEnemyFactory

EnemyAircraft<|--BossEnemy
EnemyAircraft<|--EliteEnemy
EnemyAircraft<|--MobEnemy



BossEnemyFactory..>BossEnemy
EliteEnemyFactory..>EliteEnemy
MobEnemyFactory..>MobEnemy





@enduml